machine(MachineType:L1Cache, "MSI cache")
: Sequencer *sequencer; 
  CacheMemory *cacheMemory;
  bool send_evictions;
  

  // four message buffer allocated to three virtual network
  MessageBuffer * requestToDir, network="To", virtual_network="0", vnet_type="request";
  MessageBuffer * responseToDirOrSibling, netowrk="To", virtual_network="2", vnet_type="response";

  MessageBuffer * forwardFromDir, network="From", virtual_network="1", vnet_type="forward";
  MessageBuffer * responseFromDirOrSibling, network="From", virtual_network="2", vnet_type="response";

  MessageBuffer * mandatoryQueue;
{
  state_declaration(State, desc="Cache states") {
      I,        AccessPermission:Invalid,
                      desc="Not present/Invalid";

      // State moving out of I
      IS_D,     AccessPermission:Invalid,
                      desc="Invalid, moving to S, waiting for data";
      IM_AD,    AccessPermission:Invalid,
                      desc="Invalid, moving to M, waiting for acks and data";
      IM_A,     AccessPermission:Busy,
                      desc="Invalid, moving to M, waiting for acks";

      S,        AccessPermission:Read_Only,
                      desc="Shared, Read-only, onther cache may have the block";

      // State moving out of S
      SM_AD,    AccessPermission:Read_Only,
                      desc="Shared, moving to M, waiting for acks and data";
      SM_A,     AccessPermission:Read_Only,
                      desc="Shared, moving to M, waiting for acks";
      
      M,        AccessPermission:Read_Write,
                      desc="Modified, Read & write permissions. Owner of block";
     
      // States moving to Invalid
      MI_A,     AccessPermission:Busy,
                      desc="Was modified, moving to I, waiting for put ack";
      SI_A,     AccessPermission:Busy,
                      desc="Was shared, moving to I, waiting for put ack";
      II_A,     AccessPermission:Invalid,
                      desc="Sent valid data before receiving put ack. "Waiting for put ack.";
  }
  
  enumeration(Event, desc="Cache events") {
      // From the processor/sequencer/mandatory queue
      Load,           desc="Load from processor";
      Store,          desc="Store from processor";
   
      // Internal event (only triggered from processor requests)
      Replacement     desc="Triggered when block is chosen as victim";
      
      // Forwarded request from other cache via dir on the forward network
      FwdGetS,        desc="Directory sent us a request to satisfy GetS. We must have the block in M to respond to this.";
      FwdGetM,        desc="Directory sent us a request to satisfy GetM. We must have the block in M to respond to this.";
      Inv,            desc="Invalidate from the directory.";
      PutAck,         desc="Response from directory after we issue a put. This must be on the fwd network to avoid deadlock.";

      // Responses from directory
      DataDirNoAcks,  desc="Data from directory (acks = 0)";
      DataDirAcks,    desc="Data from directory (acks > 0)";

      // Respomses from other caches
      DataOwner,      desc="Data from owner";
      InvAck,         desc="Invalidation ack from other cache after Inv";

      // Special event to simplify implementation
      LastInvAck,     desc="Triggered after the last ack is received";
  }
  
  // structure Entry storing in caches  
  structure(Entry, desc="Cache entry", interface="AbstractCacheEntry"){
      State CacheState,        desc="cache state";
      DataBlock DataBlk,       desc="Data in the block";
  }

  // structure TBE: Transaction buffer entry
  structure(TBE, desc="Entry for transient requests"){
      State TBEState,          desc="State of block";
      DataBlock DataBlk,       desc="Data for the block, need for MI_A";
      int AcksOutstanding, default=0, desc="Number of acks left to receive.";
  }
  
  // structure external class: Store all TBE structure
  structure(TBETable, external="yes"){
      TBE lookup(Addr);
      void allocate(Addr);
      void deallocate(Addr);
      bool isPresent(Addr);
  }
  
  // Other declaration and defination
  TBETable TBEs, template="<L1Cache_TBE>", constructor="m_number_of_TBEs";

  // Function used in AbstractController
  Tick clockEdge();
  
  // Variable availability set/unset functions
  void set_cache_entry(AbstractCacheEntry a);
  void unset_cache_entry();
  void set_tbe(TBE b);
  vodi unset_tbe();

  // Address mapping change funcion
  MachineID mapAddressToMachine(Addr addr, MachineType mtype);

  // Convenience funcfiton to look up the cache entry.
  // Needs a pointer so it will be a reference and can be updated in actions
  Entry getCacheEntry(Addr address), return_by_pointer="yes"{
      return static_cast(Entry, "pointer", cacheMemory.lookup(address));
  }

  // Pure Virtual Functions must implemented in AbstractController
  // getState
  State getState(TBE tbe, Entry cache_entry, Addr addr) {
      // The TBE state will override the state in cache memory, if valid
      if (is_valid(tbe)) { return tbe.TBEState; }
      // Next, if the cache entry is valid, it holds the state
      else if (is_valid(cache_entry)) { return cache_entry.CacheState; }
      // if the block isn't present, then it's state must be I.
      else { return State I;}
  }

  // setState 
  void setState(TBE tbe, Entry cache_entry, Addr addr) {
      if(is_valid(tbe)) { tbe.TBEState := state; }
      if(is_valid(cache_entry)) { cache_entry.CacheState := state; }
  }
  
  // getAccessPermission 
  AccessPermission getAccessPermission(Addr addr) {
      TBE tbe := TBEs[addr];
      if(is_valid(tbe)) {
          return L1Cache_State_to_permission(tbe.TBEState);
      }
  
      Entry cache_entry := getCacheEnrty(addr);
      if(is_valid(cache_entry)) {
          return L1Cache_State_to_permission(cache_entry.CacheState);
      }

      return AccessPermission:NotPresent;
  }

  // set access permission
  void setAccessPermission(Entry cache_entry, Addr addr, State state) {
      if (is_valid(cache_entry)) {
          cache_entry.changePermission(L1Cache_State_to_permission(state));
      }
  }

  // Read
  void functionalRead(Addr addr, Packet *pkt) {
      TBE tbe := TBEs[addr];
      if(is_valid(tbe)) {
          testAndRead(addr, tbe.DataBlk, pkt);
      }
      else {
          testAndRead(addr, getCacheEntry(addr).DataBlk, pkt);
      }
  }
  
  // Write
  void functionalWrite(Addr addr, Packet *pkt) {
      int num_functional_writes := 0;
      
      TBE tbe := TBEs[addr];
      if(is_valid(tbe)) {
          num_functional_writes := num_functional_writes +
              testAndWrite(addr, tbe.DataBlk, pkt);
      }
     
      num_functional_wirtes := num_functional_writes +
              testAndWrite(addr, getCacheEntry(addr).DataBlk, pkt);
      return num_functional_writes;
    }

    /************************************************************************************
    // Ports Defination

    // Outport: simply rename messagetype
    out_port(request_out, RequestMsg, requestToDir);
    out_port(response_out, ResponseMsg, responseToDirOrSibling);
    
    // Inport: if code blocks
    // Case:Response_in port receive ResponseMsg
    in_port(response_in, ResponseMsg, responseFromDirOrSibling) {
        if (response_in.isReady(clockEdge())) {
            peek(response_in, ResponseMsg) {
                Entry cache_entry := getCacheEnrty(in_msg.addr);
                TBE tbe := TBE[in_msg.addr];
                assert(is_valid(tbe));


                if (machineIDToMachineType(in_msg.Sender) == 
                            MachineType:Directory) {
                    if (in_msg.Type != CoherenceResponseType:Data){
                        error("Directory should only reply with data");
                    }
                    assert(in_msg.Acks + tbe.AcksOutstanding >= 0);
                    if (in_msg.Acks + tbe.AcksOutstanding == 0) {
                        trigger(Event:DataDirNoAcks, in_msg.addr, cache_entry,
                                tbe);
                    } else {
                        trigger(Event:DataDirAcks, in_msg.addr, cache_entry,
                                tbe);
                    }
                } else {
                    if (in_msg.Type == CoherenceResponseType:Data) {
                        trigger(Event:DataOwner, in_msg.addr, cache_entry,
                                tbe);
                    } else if (in_msg.Type == CoherenceResponseType:InvAck) {
                        DPRINTF(RubySlicc, "Got inv ack. %d left\n",
                                tbe.AcksOutstanding);
                        if (tbe.AcksOutstanding == 1) {
                            trigger(Event:LastInvAck, in_msg.addr, cache_entry,
                                tbe);
                        }
                    } else {
                        trigger(Event:InvAck, in_msg.addr, cache_entry,
                            tbe);
                    } else {
                        error("Unexpected Response from other cache");
                    }
                        
                }


            }
        }
    }

    // Case:Forward_in port receive RequestMsg
    in_port(forward_in, RequestMsg, forwardFromDir) {
        if (forward_in.isReady(clockEdge)) {
            peek(forward_in, RequestMsg) {
                // Grab the entry and tbe if they exist.
                Entry cache_entry := getCacheEnrty(in_msg.addr);
                TBE tbe := TBEs[in_msg.addr];

                if (in_msg.Type == CoherenceRequestType:GetS) {
                    trigger(Event:FwdGetS, in_msg.addr, cache_entry, tbe);
                } else if (in_msg.Type == CoherenceRequestType:GetM) {
                    trigger(Event:FwdGetM, in_msg.addr, cache_entry, tbe);
                } else if (in_msg.Type == CoherenceRequestType:Inv) {
                    trigger(Event:Inv, in_msg.addr, cache_entry, tbe);
                } else if (in_msg.Type == CoherenceRequestType:PutAck) {
                    trigger(Event:PutAck, in_msg.addr, tbe);
                } else {
                    error("Unexpected forward message !");
                }
            }
        }
    }

    // Case:mandatory_in port receive RubyRequest
    in_port(mandatory_in, RubyRequest, mandatoryQueue) {
    if (mandatory_in.isReady(clockEdge())) {
        peek(mandatory_in, RubyRequest, block_on="LineAddress") {
            Entry cache_entry := getCacheEntry(in_msg.LineAddress);
            TBE tbe := TBEs[in_msg.LineAddress];

            if (is_invalid(cache_entry) &&
                    cacheMemory.cacheAvail(in_msg.LineAddress) == false ) {
                Addr addr := cacheMemory.cacheProbe(in_msg.LineAddress);
                Entry victim_entry := getCacheEntry(addr);
                TBE victim_tbe := TBEs[addr];
                trigger(Event:Replacement, addr, victim_entry, victim_tbe);
            } else {
                if (in_msg.Type == RubyRequestType:LD ||
                        in_msg.Type == RubyRequestType:IFETCH) {
                    trigger(Event:Load, in_msg.LineAddress, cache_entry,
                            tbe);
                } else if (in_msg.Type == RubyRequestType:ST) {
                    trigger(Event:Store, in_msg.LineAddress, cache_entry,
                            tbe);
                } else {
                    error("Unexpected type from processor");
                }
            }
        }
    }
    }

    /***********************************************************
    // Actions Defination

    // Send GetS request to Directory
    action(sendGetS, 'gS', desc="Send GetS to the Directory") {
        enqueue(request_out, RequestMsg, 1) {
            out_msg.addr := address;
            out_msg.Type := CoherenceRequestType:GetS;
            out_msg.Destination.add(mapAddressToMachine(address,
                                    MachineType:Directory));
            // See mem/protocol/RubySlicc_Exports.sm for possible size.
            out_msg.MessageSize := MessageSize:Control;
            // See that the requestor is this machine so we get the response.
            out_msg.Requestor := machineID;
        }
    }

    // Send GetM PutS PutM
    // GetM reqeust, similar to GetS
    action(sendGetM, "gM", desc="Send GetM to the directory") {
        enqueue(request_out, RequestMsg, 1) {
            out_msg.addr := address;
            out_msg.Type := CoherenceRequestType:GetM;
            out_msg.Destination.add(mapAddressToMachine(address,
                                    MachineType:Directory));
            out_msg.MessageSize := MessageSize:Control;
            out_msg.Requestor := machineID;
        }
    }

    // Send PutS, 
    action(sendPutS, "pS", desc="Send PutS to the directory") {
        enqueue(request_out, RequestMsg, 1) {
            out_msg.addr := address;
            out_msg.Type := CoherenceRequestType:PutS;
            out_msg.Destination.add(mapAddressToMachine(address.
                                    MachineType:Directory));
            out_msg.MessageSize := MessageSize:Control;
            out_msg.Requestor := MachineID;
        }
    }

    // Send PutM, along with data
    action(sendPutM, "pM", desc="Send PutM to the directory") {
        enqueue(request_out, RequestMsg, 1) {
            out_msg.addr := address;
            out_msg.Type := CoherenceRequestType:PutM;
            out_msg.Destination.add(mapAddressToMachine(address,
                                    MachineType:Directory));
            out_msg.DataBlk := cache_entry.DataBlk;
            out_msg.MessageSize := MessageSize:Data;
            out_msg.Requestor := MachineID;
        }
    }

    // Send Data from CACHE to REQUESTOR, use BOTH in_msg AND out_msg
    action(sendCacheDataToReq, "cdR", desc="Send cache data to requestor") {
        assert(is_valid(cache_entry));
        // in_msg peek in
        peek(forward_in, RequestMsg) {
            enqueue(response_out, ResponseMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceResponseType:Data;
                // what if use address in out_msg to get destination?
                out_msg.Destination.add(in_msg.Requestor);
                out_msg.DataBlk := cache_entry.DataBlk;
                out_msg.MessageSize := MessageSize:Data;
                out_msg.Sender := machineID;
            }
        }
    }

    // Send Data from CACHE to DIRECTORY, use in PutM, no in_msg USED
    action(sendCacheDataToDir, "cdD", desc="Send the cache data to dir") {
        enqueue(response_out, ResponseMsg, 1) {
            out_msg.addr := address;
            out_msg.Type := CoherenceResponseType:Data;
            out_msg.Destination.add(mapAddressToMachine(address,
                                    MachineType:Directory));
            out_msg.DataBlk := cache_entry.DataBlk;
            out_msg.MessageSize := MessageSize:Data;
            out_msg.Sender := machineID;
        }
    }

    // Send InvAck to Requestor, in fordwording getM
    action(sendInvAcktoReq, "iaR", desc="Send inv-ack to requestor") {
        peek(forward_in, RequestMsg) {
            enqueue(response_out, ResponseMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceResponseType:InvAck;
                out_msg.Destination.add(in_msg.Requestor);
                out_msg.DataBlk := cache_entry.DataBlk;
                out_msg.MessageSize := MessageSize:Control;
                out_msg.Sender := MachineID;
            }
        }
    }

    // Ack operation actions
    // Ack decrease
    action(decrAcks, "da", desc="Decrement the number fo acks") {
        assert(is_valid(tbe));
        tbe.AcksOutstanding := tbe.AcksOutstanding - 1;
        APPEND_TRANSITION_COMMENT("Acks: ");
        APPEND_TRANSITION_COMMENT(tbe.AcksOutstanding);
    }

    // Ack store
    action(storeAcks, "sa", desc="Store the needed acks to the TBE") {
        assert(is_valid(tbe));
        peek(response_in, ResponseMsg) {
            tbe.AcksOutstanding := in_msg.Acks + tbe.AcksOutstanding;
        }
        assert(tbe.AcksOutstanding > 0);
    }

    // Actions to CPU request
    // Load hit action
    action(loadHit, "Lh", desc="Load hit") {
        assert(is_valid(cache_entry));
        // ruby/structure/cacheMemory.cc::374
        cacheMemory.setMRU(cache_entry);
        sequencer.readCallback(address, cache_entry.DataBlk, false);
    }

    // external Load hit action
    action(externalLoadHit, "xLh", desc="External load hit (was a miss)") {
        assert(is_valid(cache_entry));
        peek(response_in, ResponseMsg) {
            cacheMemory.setMRU(cache_entry);
            // Forward the type of machine that responded to this request
            // E.g., another cache or the directory. This is used for tracking
            // statistics.
            sequencer.readCallback(address, cache_entry.DataBlk, true,
                                    machineIDToMachineType(in_msg.Sender));
        }
    }

    // Store hit action
    action(storeHit, "Sh", desc="Store hit") {
        assert(is_valid(cache_entry));
        cacheMemory.setMRU(cache_entry);
        sequencer.writeCallback(address, cache_entry.DataBlk, false);
    }

    action(externalStoreHit, "xSh", desc="External store hit (was a miss)") {
        assert(is_valid(cache_entry));
        peek(response_in, ResponseMsg) {
            cacheMemory.setMRU(cache_entry);
            sequencer.writeCallback(address, cache_entry.DataBlk, true,
                                    // Note: this could be the last acks
                                    machineIDToMachineType(in_msg.Sender));
        }
    }

    // Eviction action
    action(eviction, "s", desc="sends eviction notification to CPU") {
        if (send_evictions) {
            sequencer.evictionCallback(address);
        }
    }

    // Cache operation Actions

    // Cache allocate
    action(allocateCacheBlock, "a", desc="Allocate a cache block") {
        // if cache_entry is in invalid state, so it needs allocate
        assert(is_invalid(cache_entry));
        // if the address is available
        assert(cacheMemory.cacheAvail(address));
        
        // call set_cache_entry function to implement allocation
        // AbstractCacheEntry*
        // CacheMemory::allocate(Addr address, AbstractCacheEntry* entry)
        set_cache_entry(cacheMemory.allocate(address, new Entry));
    }

    // Cache deallocate
    action(deallocateCacheBlock, "d", desc="Deallocate a cache block") {
        assert(is_valid(cache_entry));
        // void
        // CacheMemory::deallocate(Addr address)
        cacheMemory.deallocate(address);
        // clear the cache_entry variable (now it's invalid)
        unset_cache_entry();
    }

    // Write Cache
    action(writeDataToCache, "wd", desc="Write data to the cache") {

        // Peek the top message in response_in MessageBuffer
        peek(response_in, ResponseMsg) {
            assert(is_valid(cache_entry));

            // Write data of in_msg in cache_entry
            cache_entry.DataBlk := in_msg.DataBlk;
        }
    }

    // TBE allocate
    action(allocateTBE, "aT", desc="Allocate TBE") {

        // If TBE is in invalid, so it needs allocate
        assert(is_invalid(tbe));

        // call the TBE allocate function, in defination of TBETable
        TBEs.allocate(address);

        // this updates the tbe variable for other actions
        // optional function section
        set_tbe(TBEs[address]);
    }

    // TBE deallocation
    action(deallocateTBE, "dT", desc="Deallocate TBE") {
        // Only deallocate the valid block
        assert(is_valid(tbe));
        TBEs.deallocate(address);
        // this makes the tbe variable invalid
        unset_tbe();
    }

    // copy Data from Cache to TBE, 
    // Use to BACK UP in case cache remains the owner
    action(copyDataFromCacheToTBE, "Dct", desc="Copy data from cache to TBE") {
        assert(is_valid(cache_entry));
        assert(is_valid(tbe));
        tbe.DataBlk := cache_entry.DataBlk;
    }

    // MessageBuffer Dequeue Action
    // MessageBuffer DEQUEUE function:
    // Tick
    // MessageBuffer::dequeue(Tick current_time, bool decrement_message)

    // Mandatory Buffer Dequeue
    action(popMandatoryQueue, "pM", desc="Pop the mandatory queue") {
        mandatory_in.dequeue(clockEdge());
    }

    // Response Buffer Dequeue
    action(popResponseQueue, "pR", desc="Pop the response queue") {
        response_in.dequeue(clockEdge());
    }

    // Forward Buffer Dequeue
    action(popForwardQueue, "pF", desc="Pop the forward queue") {
        forward_in.dequeue(clockEdge());
    }

    // Z stall 
    action(stall, "z", desc="Stall all incoming request in the Message Buffer") {
        // z_stall
    }

    /***********************************************************************
    // Transition code

    // Transition template: from I->IS_D
    transition(I, Load, IS_D) {
        // From Invalid, first need cache allocate
        allocateCacheBlock;
        // 
        allocateTBE;
        sendGetS;
        popMandatoryQueue;
    }

    transition(IS_D, {Load, Store, Replacement, Inv}) {
        stall;
    }
    transition(IS_D, {DataDirNoAcks, DataOwner}, S) {
    writeDataToCache;
    deallocateTBE;
    externalLoadHit;
    popResponseQueue;
}

    transition({IM_AD, IM_A}, {Load, Store, Replacement, FwdGetS, FwdGetM}) {
        stall;
    }

    transition({IM_AD, SM_AD}, {DataDirNoAcks, DataOwner}, M) {
        writeDataToCache;
        deallocateTBE;
        externalStoreHit;
        popResponseQueue;
    }

    transition(IM_AD, DataDirAcks, IM_A) {
        writeDataToCache;
        storeAcks;
        popResponseQueue;
    }

    transition({IM_AD, IM_A, SM_AD, SM_A}, InvAck) {
        decrAcks;
        popResponseQueue;
    }

    transition({IM_A, SM_A}, LastInvAck, M) {
        deallocateTBE;
        externalStoreHit;
        popResponseQueue;
    }

    transition({S, SM_AD, SM_A, M}, Load) {
        loadHit;
        popMandatoryQueue;
    }

    transition(S, Store, SM_AD) {
        allocateTBE;
        sendGetM;
        popMandatoryQueue;
    }

    transition(S, Replacement, SI_A) {
        sendPutS;
        forwardEviction;
    }

    transition(S, Inv, I) {
        sendInvAcktoReq;
        deallocateCacheBlock;
        forwardEviction;
        popForwardQueue;
    }

    transition({SM_AD, SM_A}, {Store, Replacement, FwdGetS, FwdGetM}) {
        stall;
    }

    transition(SM_AD, Inv, IM_AD) {
        sendInvAcktoReq;
        forwardEviction;
        popForwardQueue;
    }

    transition(SM_AD, DataDirAcks, SM_A) {
        writeDataToCache;
        storeAcks;
        popResponseQueue;
    }

    transition(M, Store) {
        storeHit;
        popMandatoryQueue;
    }

    transition(M, Replacement, MI_A) {
        sendPutM;
        forwardEviction;
    }

    transition(M, FwdGetS, S) {
        sendCacheDataToReq;
        sendCacheDataToDir;
        popForwardQueue;
    }

    transition(M, FwdGetM, I) {
        sendCacheDataToReq;
        deallocateCacheBlock;
        popForwardQueue;
    }

    transition({MI_A, SI_A, II_A}, {Load, Store, Replacement}) {
        stall;
    }

    transition(MI_A, FwdGetS, SI_A) {
        sendCacheDataToReq;
        sendCacheDataToDir;
        popForwardQueue;
    }

    transition(MI_A, FwdGetM, II_A) {
        sendCacheDataToReq;
        popForwardQueue;
    }

    transition({MI_A, SI_A, II_A}, PutAck, I) {
        deallocateCacheBlock;
        popForwardQueue;
    }

    transition(SI_A, Inv, II_A) {
        sendInvAcktoReq;
        popForwardQueue;
    }

}